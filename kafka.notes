import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class TaxHandlerTest {

    // Declare the mocked static reference
    private MockedStatic<TaxEngine> mockedTaxEngine;

    @BeforeEach
    public void setUp() {
        // Mock the static methods of TaxEngine
        mockedTaxEngine = mockStatic(TaxEngine.class);
    }

    @AfterEach
    public void tearDown() {
        // Close the mock after each test to avoid memory leaks
        mockedTaxEngine.close();
    }

    @Test
    public void testCreate_whenTaxIsDisabled() {
        // Arrange
        TaxHandler taxHandler = new TaxHandler();

        // Mock the instance and its behavior
        TaxEngine taxEngineMock = mock(TaxEngine.class);
        mockedTaxEngine.when(TaxEngine::getInstance).thenReturn(taxEngineMock);
        when(taxEngineMock.isTaxEnabled()).thenReturn(false);

        // Act
        taxHandler.create();

        // Assert
        // Add assertions here to verify the behavior of taxHandler when isTaxEnabled is false
        // For example:
        // assertFalse(taxHandler.isFlagBSet());
    }
}

