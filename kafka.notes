import org.apache.kafka.clients.admin.AdminClient;
import org.apache.kafka.clients.admin.AdminClientConfig;
import org.apache.kafka.clients.admin.NewTopic;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.kafka.core.KafkaAdmin;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.Properties;
import java.util.concurrent.ExecutionException;

@Service
public class KafkaTopicService {

    private final KafkaAdmin kafkaAdmin;

    public KafkaTopicService(KafkaAdmin kafkaAdmin) {
        this.kafkaAdmin = kafkaAdmin;
    }

    // Method to create a topic
    public String createTopic(String topicName, int numPartitions, short replicationFactor) {
        Properties props = new Properties();
        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaAdmin.getConfigurationProperties().get("bootstrap.servers"));
        
        try (AdminClient adminClient = AdminClient.create(props)) {
            NewTopic newTopic = new NewTopic(topicName, numPartitions, replicationFactor);
            adminClient.createTopics(Collections.singletonList(newTopic)).all().get();
            return "Topic '" + topicName + "' created successfully.";
        } catch (InterruptedException | ExecutionException e) {
            return "Failed to create topic: " + e.getMessage();
        }
    }
}


  @PostMapping("/create-topic")
    public ResponseEntity<String> createTopic(
            @RequestParam String topicName,
            @RequestParam(defaultValue = "1") int numPartitions,
            @RequestParam(defaultValue = "1") short replicationFactor) {

        String response = kafkaTopicService.createTopic(topicName, numPartitions, replicationFactor);
        return ResponseEntity.ok(response);
    }
