# Kafka bootstrap servers
spring.kafka.bootstrap-servers=localhost:9093
spring.kafka.admin.properties.bootstrap.servers=localhost:9093

# Security protocol
spring.kafka.properties.security.protocol=SSL
spring.kafka.admin.properties.security.protocol=SSL

# SSL configuration
spring.kafka.properties.ssl.truststore.location=/path/to/kafka.truststore.jks
spring.kafka.properties.ssl.truststore.password=yourTrustStorePassword
spring.kafka.properties.ssl.keystore.location=/path/to/kafka.keystore.jks
spring.kafka.properties.ssl.keystore.password=yourKeyStorePassword
spring.kafka.properties.ssl.key.password=yourKeyPassword

# Admin client specific SSL configuration (if needed)
spring.kafka.admin.properties.ssl.truststore.location=/path/to/kafka.truststore.jks
spring.kafka.admin.properties.ssl.truststore.password=yourTrustStorePassword
spring.kafka.admin.properties.ssl.keystore.location=/path/to/kafka.keystore.jks
spring.kafka.admin.properties.ssl.keystore.password=yourKeyStorePassword
spring.kafka.admin.properties.ssl.key.password=yourKeyPassword

import org.apache.kafka.clients.admin.AdminClient;
import org.apache.kafka.clients.admin.AdminClientConfig;

import java.util.Properties;

public class KafkaAdminClientConfig {

    public static AdminClient createAdminClient() {
        Properties props = new Properties();
        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9093");
        props.put(AdminClientConfig.SECURITY_PROTOCOL_CONFIG, "SSL");
        props.put("ssl.truststore.location", "/path/to/kafka.truststore.jks");
        props.put("ssl.truststore.password", "yourTrustStorePassword");
        props.put("ssl.keystore.location", "/path/to/kafka.keystore.jks");
        props.put("ssl.keystore.password", "yourKeyStorePassword");
        props.put("ssl.key.password", "yourKeyPassword");
        
        return AdminClient.create(props);
    }
}
