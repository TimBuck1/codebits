-- Convert businessdate to DATE if necessary
SELECT TO_DATE(businessdate, 'YYYY-MM-DD') - INTERVAL '1' DAY AS enddate
FROM your_table;

properties
Copy code
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
In your Dockerfile, do not hardcode the credentials. Instead, pass them in at runtime:

dockerfile
Copy code
FROM openjdk:11-jre-slim
COPY target/your-app.jar /app/your-app.jar
ENTRYPOINT ["java", "-jar", "/app/your-app.jar"]
In your docker-compose.yml (if using Docker Compose) or when running docker run, pass the credentials as environment variables:

yaml
Copy code
version: '3.8'
services:
  app:
    image: your-app-image
    environment:
      - DB_USERNAME=your-username
      - DB_PASSWORD=your-password

COPY keystore.jks /opt/app/config/

# Then in application.properties
server.ssl.key-store=file:/opt/app/config/keystore.jks

java -jar your-app.jar --spring.config.additional-location=file:/path/to/external.conf

import org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent;
import org.springframework.context.ApplicationListener;
import org.springframework.core.env.Environment;
import org.springframework.core.env.PropertySource;

public class PropertyLoggerListener implements ApplicationListener<ApplicationEnvironmentPreparedEvent> {

    @Override
    public void onApplicationEvent(ApplicationEnvironmentPreparedEvent event) {
        Environment env = event.getEnvironment();
        for (PropertySource<?> propertySource : env.getPropertySources()) {
            System.out.println("PropertySource: " + propertySource.getName());
            if (propertySource.getSource() instanceof java.util.Map) {
                ((java.util.Map<?, ?>) propertySource.getSource()).forEach((key, value) -> 
                    System.out.println(key + "=" + value)
                );
            }
        }
    }
}


