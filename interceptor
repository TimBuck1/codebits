package com.tester.demo.service;

import com.tester.demo.model.coinEntity;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.common.TopicPartition;

import java.time.Duration;
import java.util.concurrent.atomic.AtomicBoolean;

public class coinConsumer implements Runnable {
    private final AtomicBoolean running = new AtomicBoolean(true);
    private final lotTracer lotTracer;
    private final coinProducer producer;
    private final KafkaConsumer<byte[], coinEntity> coinEntityKafkaConsumer;

    public coinConsumer(lotTracer lotTracer, coinProducer producer, KafkaConsumer<byte[], coinEntity> coinEntityKafkaConsumer) {
        this.lotTracer = lotTracer;
        this.producer = producer;
        this.coinEntityKafkaConsumer = coinEntityKafkaConsumer;
    }

    @Override
    public void run() {
        try {
            while (isRunning()) {
                ConsumerRecords<byte[], coinEntity> records = fetchRecords();
                if (records.count() == 0) {
                    continue;
                }

                processRecords(records);

                long completedlotId;
                while ((completedlotId = getCompletedlotId()) != -1) {
                    calculatecoinesForlot(completedlotId);
                    sendlotToProducer(completedlotId);
                }
            }
        } catch (Exception e) {
            handleException(e);
        }
    }

    private boolean isRunning() {
        return !Thread.currentThread().isInterrupted() && running.get();
    }

    private ConsumerRecords<byte[], coinEntity> fetchRecords() {
        return coinEntityKafkaConsumer.poll(Duration.ofMillis(100));
    }

    private void processRecords(ConsumerRecords<byte[], coinEntity> records) {
        lotTracer.accumalateRecords(records);
    }

    private long getCompletedlotId() {
        return lotTracer.hascoinCalculated() ? lotTracer.getCompletedlotId() : -1;
    }

    private void calculatecoinesForlot(long lotId) {
        while (!lotTracer.iscoinCalculated(lotId)) {
            // You can add more logic here if needed, like logging, etc.
        }
    }

    private void sendlotToProducer(long completedlotId) {
        producer.beginTransaction();
        producer.send(lotTracer.getInputlot(completedlotId), lotTracer.getOutputlot(completedlotId));
        producer.sendOffsetsToTransaction(lotTracer.getInputlot(completedlotId).getOffsetToCommit(), new TopicPartition("gg", 0));
        producer.commitTransaction();
        lotTracer.clearCompletedlot(completedlotId);
    }

    private void handleException(Exception e) {
        // Log the exception or handle it as necessary
        e.printStackTrace(); // Placeholder: replace with proper logging
    }
}
