pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'your-docker-registry'
        SPRING_PROFILES_ACTIVE = 'medium'
        DOCKER_COMPOSE_FILE = 'docker-compose.yml'
        PERFORMANCE_APP_SERVICE = 'performance-app'
        TAX_APP_SERVICE = 'tax-app'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Pull Images') {
            steps {
                script {
                    // Pull the Docker images from the registry
                    sh "docker pull ${DOCKER_REGISTRY}/performance-app:latest"
                    sh "docker pull ${DOCKER_REGISTRY}/tax-app:latest"
                    // Pull other necessary images if needed
                }
            }
        }

        stage('Start Applications') {
            steps {
                script {
                    // Bring up the performance tester and other applications
                    sh "SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE} docker-compose -f ${DOCKER_COMPOSE_FILE} up -d ${PERFORMANCE_APP_SERVICE}"
                    sh "SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE} docker-compose -f ${DOCKER_COMPOSE_FILE} up -d ${TAX_APP_SERVICE}"
                    
                    // Wait for a while to make sure applications are initializing
                    sleep(time: 30, unit: 'SECONDS')
                }
            }
        }

        stage('Monitor Performance App') {
            steps {
                script {
                    def performanceAppStopped = false
                    def maxRetries = 40
                    def retryInterval = 30 // seconds
                    
                    for (int i = 0; i < maxRetries; i++) {
                        try {
                            def response = sh(script: "docker inspect --format='{{.State.Running}}' ${PERFORMANCE_APP_SERVICE}", returnStdout: true).trim()
                            if (response == 'false') {
                                performanceAppStopped = true
                                break
                            }
                        } catch (Exception e) {
                            // Ignore the exception and retry
                        }
                        sleep(time: retryInterval, unit: 'SECONDS')
                    }

                    if (!performanceAppStopped) {
                        error("Performance app did not stop within the expected time.")
                    } else {
                        echo "Performance app stopped successfully."
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up the Docker containers
            sh "docker-compose -f ${DOCKER_COMPOSE_FILE} down"
        }
    }
}
