import io.cucumber.datatable.DataTable;
import io.cucumber.java.After;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.junit.jupiter.api.Assertions;

import java.util.*;

public class TradeTaxStepDefinitions {

    private final Map<String, List<Tax>> tradeTaxes = new HashMap<>();

    // Step to receive trades
    @When("trades received")
    public void tradesReceived(DataTable table) {
        List<Map<String, String>> rows = table.asMaps(String.class, String.class);

        for (Map<String, String> row : rows) {
            String tradeId = row.get("tradeid");
            int qty = Integer.parseInt(row.get("Qty"));

            // Simulate tax calculation and storing result
            List<Tax> calculatedTaxes = calculateTaxes(tradeId, qty);
            tradeTaxes.put(tradeId, calculatedTaxes);
        }
    }

    // Step to verify taxes for a specific trade
    @Then("verify tax for {string}")
    public void verifyTaxForTrade(String tradeId, DataTable table) {
        List<Tax> expectedTaxes = new ArrayList<>();
        List<Map<String, String>> rows = table.asMaps(String.class, String.class);

        for (Map<String, String> row : rows) {
            int taxAmount = Integer.parseInt(row.get("taxAmount"));
            int rule = Integer.parseInt(row.get("rule"));
            expectedTaxes.add(new Tax(taxAmount, rule));
        }

        // Fetch calculated taxes for the trade
        List<Tax> actualTaxes = tradeTaxes.getOrDefault(tradeId, new ArrayList<>());

        // Assertion to verify both lists are equal
        Assertions.assertEquals(expectedTaxes, actualTaxes, "Tax mismatch for trade: " + tradeId);
    }

    // Simulated tax calculation logic (replace this with actual implementation)
    private List<Tax> calculateTaxes(String tradeId, int qty) {
        List<Tax> taxes = new ArrayList<>();
        if ("trade1".equals(tradeId)) {
            taxes.add(new Tax(56, 1));
            taxes.add(new Tax(98, 2));
        } else if ("trade2".equals(tradeId)) {
            taxes.add(new Tax(73, 5));
            taxes.add(new Tax(23, 8));
        }
        return taxes;
    }

    // Hook to clear data after each scenario
    @After
    public void tearDown() {
        tradeTaxes.clear();
    }

    // Tax class for comparison
    static class Tax {
        int taxAmount;
        int rule;

        Tax(int taxAmount, int rule) {
            this.taxAmount = taxAmount;
            this.rule = rule;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) return true;
            if (obj == null || getClass() != obj.getClass()) return false;
            Tax tax = (Tax) obj;
            return taxAmount == tax.taxAmount && rule == tax.rule;
        }

        @Override
        public int hashCode() {
            return Objects.hash(taxAmount, rule);
        }

        @Override
        public String toString() {
            return "Tax{amount=" + taxAmount + ", rule=" + rule + "}";
        }
    }
}
