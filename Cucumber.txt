import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.WebResource;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

public class JerseyClientServiceTest {

    @Mock
    private Client mockClient;

    @Mock
    private WebResource mockWebResource;

    @Mock
    private ClientResponse mockClientResponse;

    @InjectMocks
    private JerseyClientService service;

    @BeforeEach
    public void setUp() {
        // Initialize mocks
        MockitoAnnotations.openMocks(this);
        service = new JerseyClientService("http://example.com");
    }

    @Test
    public void testGetResponse_Success() {
        // Setup mock behavior
        when(mockClient.resource(anyString())).thenReturn(mockWebResource);
        when(mockWebResource.path(anyString())).thenReturn(mockWebResource);
        when(mockWebResource.get(ClientResponse.class)).thenReturn(mockClientResponse);
        when(mockClientResponse.getStatus()).thenReturn(200);
        when(mockClientResponse.getEntity(String.class)).thenReturn("Success Response");

        // Call the method to test
        String result = service.getResponse("test-endpoint");

        // Verify and assert
        assertEquals("Success Response", result);
        verify(mockClient).resource(anyString());
        verify(mockWebResource).get(ClientResponse.class);
    }

    @Test
    public void testGetResponse_Failure() {
        // Setup mock behavior
        when(mockClient.resource(anyString())).thenReturn(mockWebResource);
        when(mockWebResource.path(anyString())).thenReturn(mockWebResource);
        when(mockWebResource.get(ClientResponse.class)).thenReturn(mockClientResponse);
        when(mockClientResponse.getStatus()).thenReturn(404);

        // Expect an exception
        RuntimeException exception = assertThrows(RuntimeException.class, () -> {
            service.getResponse("test-endpoint");
        });

        assertEquals("Failed with HTTP error code: 404", exception.getMessage());
    }
}

curl -X GET "http://localhost:9200/your_index_name/_search?pretty" -H 'Content-Type: application/json' -d'
{
  "query": {
    "match_all": {}
  }
}
