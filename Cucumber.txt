import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;

import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

public class KafkaProducerRegistry {

    private final Map<String, KafkaProducer<String, String>> producerMap = new HashMap<>();
    private final String bootstrapServers;

    public KafkaProducerRegistry(String bootstrapServers) {
        this.bootstrapServers = bootstrapServers;
    }

    public KafkaProducer<String, String> getProducer(String producerName) {
        return producerMap.computeIfAbsent(producerName, this::createProducer);
    }

    private KafkaProducer<String, String> createProducer(String producerName) {
        Properties props = new Properties();
        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());

        return new KafkaProducer<>(props);
    }

    public void closeAllProducers() {
        producerMap.values().forEach(KafkaProducer::close);
    }
}
2. Implement the Health Indicator Using the Registry
The health indicator now only interacts with the registry and does not need to manage producer creation directly.

java
Copy code
import org.springframework.boot.actuate.health.Health;
import org.springframework.boot.actuate.health.HealthIndicator;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerRecord;

public class KafkaHealthIndicator implements HealthIndicator {

    private final KafkaProducerRegistry producerRegistry;

    public KafkaHealthIndicator(KafkaProducerRegistry producerRegistry) {
        this.producerRegistry = producerRegistry;
    }

    @Override
    public Health health() {
        try {
            for (String producerName : producerRegistry.getAllProducerNames()) {
                KafkaProducer<String, String> producer = producerRegistry.getProducer(producerName);
                if (!isProducerHealthy(producer)) {
                    return Health.down().withDetail("Producer", producerName + " is unhealthy").build();
                }
            }
        } catch (Exception e) {
            return Health.down().withDetail("Exception", e.getMessage()).build();
        }
        return Health.up().build();
    }

    private boolean isProducerHealthy(KafkaProducer<String, String> producer) {
        try {
            // Example health check: Send a test record to a topic (non-blocking)
            producer.send(new ProducerRecord<>("test-topic", "health-check-key", "health-check-value"));
            // In real scenarios, more sophisticated checks may be needed
            return true;
        } catch (Exception e) {
            // Log or handle exceptions as needed
            return false;
        }
    }
}
3. Wiring with Spring (if applicable)
Configuration: You can configure the KafkaProducerRegistry as a bean in your Spring configuration.
Injection: Inject the registry into the KafkaHealthIndicator.
java
Copy code
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class KafkaConfig {

    @Bean
    public KafkaProducerRegistry kafkaProducerRegistry() {
        return new KafkaProducerRegistry("localhost:9092"); // Example config, replace with actual
    }

    @Bean
    public KafkaHealthIndicator kafkaHealthIndicator(KafkaProducerRegistry registry) {
        return new KafkaHealthIndicator(registry);
    }
}
