import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.test.web.reactive.server.WebTestClient;
import reactor.core.publisher.Mono;

@WebFluxTest(YourController.class)
public class YourControllerTest {

    @Autowired
    private WebTestClient webTestClient;

    @Autowired
    private YourController yourController; // Inject the controller directly

    @Test
    void testSaveMethod() {
        // Mock any necessary dependencies

        // Define your DTO
        YourDto dto = new YourDto(/* initialize with relevant data */);

        // Invoke the save method directly
        Mono<ResponseEntity<YourResponseDto>> responseMono = yourController.save(dto);

        // Verify the response body
        webTestClient
                .mutateWith(csrf()) // If CSRF protection is enabled
                .post()
                .uri("/api/save") // Adjust the URI if needed
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue(dto)
                .exchange()
                .expectStatus().isOk()
                .expectBody(YourResponseDto.class) // Adjust the expected response type
                .consumeWith(response -> {
                    YourResponseDto responseBody = response.getResponseBody();
                    // Add assertions based on your expected response
                    // For example:
                    assertThat(responseBody.getId()).isNotNull();
                    assertThat(responseBody.getMessage()).isEqualTo("Saved successfully");
                });
    }
}
