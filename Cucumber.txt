import org.springframework.stereotype.Service;
import java.util.concurrent.atomic.AtomicBoolean;

@Service
public class HealthMonitorService {
    private final AtomicBoolean healthy = new AtomicBoolean(true);

    public void markUnhealthy() {
        healthy.set(false);
    }

    public void markHealthy() {
        healthy.set(true);
    }

    public boolean isHealthy() {
        return healthy.get();
    }
}
Step 2: Update WebFilter to Modify Health State
Use the shared HealthMonitorService in your WebFilter to update the health status based on request or response conditions:

java
Copy code
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.WebFilter;
import org.springframework.web.server.WebFilterChain;
import reactor.core.publisher.Mono;

@Component
public class CustomWebFilter implements WebFilter {

    private final HealthMonitorService healthMonitorService;

    @Autowired
    public CustomWebFilter(HealthMonitorService healthMonitorService) {
        this.healthMonitorService = healthMonitorService;
    }

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
        return chain.filter(exchange).doOnSuccess(aVoid -> {
            // Example condition: check if response contains "EXCEPTION"
            if (exchange.getResponse().getStatusCode().is5xxServerError()) {
                healthMonitorService.markUnhealthy();
            } else {
                healthMonitorService.markHealthy();
            }
        });
    }
}
Step 3: Implement a ReactiveHealthIndicator that Reflects the Service State
The ReactiveHealthIndicator reads the state from HealthMonitorService to report the application's health:

java
Copy code
import org.springframework.boot.actuate.health.Health;
import org.springframework.boot.actuate.health.ReactiveHealthIndicator;
import org.springframework.stereotype.Component;
import reactor.core.publisher.Mono;

@Component
public class TaxCalculationHealthIndicator implements ReactiveHealthIndicator {

    private final HealthMonitorService healthMonitorService;

    public TaxCalculationHealthIndicator(HealthMonitorService healthMonitorService) {
        this.healthMonitorService = healthMonitorService;
    }

    @Override
    public Mono<Health> health() {
        if (healthMonitorService.isHealthy()) {
            return Mono.just(Health.up().build());
        } else {
            return Mono.just(Health.down().withDetail("Error", "Detected issue with Tax Calculation").build());
        }
    }
}
